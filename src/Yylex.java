/* The following code was generated by JFlex 1.4.3 on 21/11/18, 09:59 */

// Circuit.lex
//
// Description of lexer for circuit description language.
//
// Ian Stark

import java_cup.runtime.Symbol; 		//This is how we pass tokens to the parser


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 21/11/18, 09:59 from the specification file
 * <tt>/Users/francescovicidomini/git/Compilatori/LexerJFlex/Circuit.lex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\31\1\1\1\26\1\0\2\1\16\31\4\0\1\1\3\0\1\30"+
    "\3\0\1\32\1\32\1\0\1\23\1\32\1\22\1\32\1\0\1\24"+
    "\11\25\1\0\1\32\1\17\1\21\1\20\2\0\4\30\1\27\25\30"+
    "\1\32\1\0\1\32\1\0\1\30\1\0\1\16\1\15\1\30\1\12"+
    "\1\6\1\3\1\30\1\5\1\2\2\30\1\10\1\30\1\7\1\13"+
    "\3\30\1\11\1\4\1\14\5\30\1\32\1\0\1\32\1\0\41\31"+
    "\2\0\4\30\4\0\1\30\2\0\1\31\7\0\1\30\4\0\1\30"+
    "\5\0\27\30\1\0\37\30\1\0\u01ca\30\4\0\14\30\16\0\5\30"+
    "\7\0\1\30\1\0\1\30\21\0\160\31\5\30\1\0\2\30\2\0"+
    "\4\30\1\0\1\30\6\0\1\30\1\0\3\30\1\0\1\30\1\0"+
    "\24\30\1\0\123\30\1\0\213\30\1\0\5\31\2\0\246\30\1\0"+
    "\46\30\2\0\1\30\7\0\47\30\7\0\1\30\1\0\55\31\1\0"+
    "\1\31\1\0\2\31\1\0\2\31\1\0\1\31\10\0\33\30\5\0"+
    "\3\30\15\0\6\31\5\0\1\30\4\0\13\31\1\0\1\31\3\0"+
    "\53\30\37\31\4\0\2\30\1\31\143\30\1\0\1\30\10\31\1\0"+
    "\6\31\2\30\2\31\1\0\4\31\2\30\12\31\3\30\2\0\1\30"+
    "\17\0\1\31\1\30\1\31\36\30\33\31\2\0\131\30\13\31\1\30"+
    "\16\0\12\31\41\30\11\31\2\30\4\0\1\30\5\0\26\30\4\31"+
    "\1\30\11\31\1\30\3\31\1\30\5\31\22\0\31\30\3\31\4\0"+
    "\13\30\65\0\25\30\1\0\10\30\26\0\60\31\66\30\3\31\1\30"+
    "\22\31\1\30\7\31\12\30\2\31\2\0\12\31\1\0\20\30\3\31"+
    "\1\0\10\30\2\0\2\30\2\0\26\30\1\0\7\30\1\0\1\30"+
    "\3\0\4\30\2\0\1\31\1\30\7\31\2\0\2\31\2\0\3\31"+
    "\1\30\10\0\1\31\4\0\2\30\1\0\3\30\2\31\2\0\12\31"+
    "\4\30\7\0\2\30\4\0\3\31\1\0\6\30\4\0\2\30\2\0"+
    "\26\30\1\0\7\30\1\0\2\30\1\0\2\30\1\0\2\30\2\0"+
    "\1\31\1\0\5\31\4\0\2\31\2\0\3\31\3\0\1\31\7\0"+
    "\4\30\1\0\1\30\7\0\14\31\3\30\1\31\13\0\3\31\1\0"+
    "\11\30\1\0\3\30\1\0\26\30\1\0\7\30\1\0\2\30\1\0"+
    "\5\30\2\0\1\31\1\30\10\31\1\0\3\31\1\0\3\31\2\0"+
    "\1\30\17\0\2\30\2\31\2\0\12\31\1\0\1\30\7\0\1\30"+
    "\6\31\1\0\3\31\1\0\10\30\2\0\2\30\2\0\26\30\1\0"+
    "\7\30\1\0\2\30\1\0\5\30\2\0\1\31\1\30\7\31\2\0"+
    "\2\31\2\0\3\31\10\0\2\31\4\0\2\30\1\0\3\30\2\31"+
    "\2\0\12\31\1\0\1\30\20\0\1\31\1\30\1\0\6\30\3\0"+
    "\3\30\1\0\4\30\3\0\2\30\1\0\1\30\1\0\2\30\3\0"+
    "\2\30\3\0\3\30\3\0\14\30\4\0\5\31\3\0\3\31\1\0"+
    "\4\31\2\0\1\30\6\0\1\31\16\0\12\31\11\0\1\30\6\0"+
    "\4\31\1\0\10\30\1\0\3\30\1\0\27\30\1\0\20\30\3\0"+
    "\1\30\7\31\1\0\3\31\1\0\4\31\7\0\2\31\1\0\3\30"+
    "\5\0\2\30\2\31\2\0\12\31\20\0\1\30\3\31\1\0\10\30"+
    "\1\0\3\30\1\0\27\30\1\0\12\30\1\0\5\30\2\0\1\31"+
    "\1\30\7\31\1\0\3\31\1\0\4\31\7\0\2\31\7\0\1\30"+
    "\1\0\2\30\2\31\2\0\12\31\1\0\2\30\15\0\4\31\1\0"+
    "\10\30\1\0\3\30\1\0\51\30\2\31\1\30\7\31\1\0\3\31"+
    "\1\0\4\31\1\30\5\0\3\30\1\31\7\0\3\30\2\31\2\0"+
    "\12\31\12\0\6\30\2\0\2\31\1\0\22\30\3\0\30\30\1\0"+
    "\11\30\1\0\1\30\2\0\7\30\3\0\1\31\4\0\6\31\1\0"+
    "\1\31\1\0\10\31\6\0\12\31\2\0\2\31\15\0\60\30\1\31"+
    "\2\30\7\31\4\0\10\30\10\31\1\0\12\31\47\0\2\30\1\0"+
    "\1\30\2\0\2\30\1\0\1\30\2\0\1\30\6\0\4\30\1\0"+
    "\7\30\1\0\3\30\1\0\1\30\1\0\1\30\2\0\2\30\1\0"+
    "\4\30\1\31\2\30\6\31\1\0\2\31\1\30\2\0\5\30\1\0"+
    "\1\30\1\0\6\31\2\0\12\31\2\0\4\30\40\0\1\30\27\0"+
    "\2\31\6\0\12\31\13\0\1\31\1\0\1\31\1\0\1\31\4\0"+
    "\2\31\10\30\1\0\44\30\4\0\24\31\1\0\2\31\5\30\13\31"+
    "\1\0\44\31\11\0\1\31\71\0\53\30\24\31\1\30\12\31\6\0"+
    "\6\30\4\31\4\30\3\31\1\30\3\31\2\30\7\31\3\30\4\31"+
    "\15\30\14\31\1\30\17\31\2\0\46\30\1\0\1\30\5\0\1\30"+
    "\2\0\53\30\1\0\u014d\30\1\0\4\30\2\0\7\30\1\0\1\30"+
    "\1\0\4\30\2\0\51\30\1\0\4\30\2\0\41\30\1\0\4\30"+
    "\2\0\7\30\1\0\1\30\1\0\4\30\2\0\17\30\1\0\71\30"+
    "\1\0\4\30\2\0\103\30\2\0\3\31\40\0\20\30\20\0\126\30"+
    "\2\0\6\30\3\0\u026c\30\2\0\21\30\1\0\32\30\5\0\113\30"+
    "\3\0\13\30\7\0\15\30\1\0\4\30\3\31\13\0\22\30\3\31"+
    "\13\0\22\30\2\31\14\0\15\30\1\0\3\30\1\0\2\31\14\0"+
    "\64\30\40\31\3\0\1\30\3\0\2\30\1\31\2\0\12\31\41\0"+
    "\4\31\1\0\12\31\6\0\130\30\10\0\5\30\2\31\42\30\1\31"+
    "\1\30\5\0\106\30\12\0\37\30\1\0\14\31\4\0\14\31\12\0"+
    "\12\31\36\30\2\0\5\30\13\0\54\30\4\0\32\30\6\0\12\31"+
    "\46\0\27\30\5\31\4\0\65\30\12\31\1\0\35\31\2\0\13\31"+
    "\6\0\12\31\15\0\1\30\10\0\16\31\102\0\5\31\57\30\21\31"+
    "\7\30\4\0\12\31\21\0\11\31\14\0\3\31\36\30\15\31\2\30"+
    "\12\31\54\30\16\31\14\0\44\30\24\31\10\0\12\31\3\0\3\30"+
    "\12\31\44\30\2\0\11\30\107\0\3\31\1\0\25\31\4\30\1\31"+
    "\4\30\3\31\2\30\3\31\6\0\300\30\72\31\1\0\5\31\u0116\30"+
    "\2\0\6\30\2\0\46\30\2\0\6\30\2\0\10\30\1\0\1\30"+
    "\1\0\1\30\1\0\1\30\1\0\37\30\2\0\65\30\1\0\7\30"+
    "\1\0\1\30\3\0\3\30\1\0\7\30\3\0\4\30\2\0\6\30"+
    "\4\0\15\30\5\0\3\30\1\0\7\30\16\0\5\31\32\0\5\31"+
    "\20\0\2\30\23\0\1\30\13\0\5\31\1\0\12\31\1\0\1\30"+
    "\15\0\1\30\20\0\15\30\3\0\40\30\20\0\15\31\4\0\1\31"+
    "\3\0\14\31\21\0\1\30\4\0\1\30\2\0\12\30\1\0\1\30"+
    "\3\0\5\30\6\0\1\30\1\0\1\30\1\0\1\30\1\0\4\30"+
    "\1\0\13\30\2\0\4\30\5\0\5\30\4\0\1\30\21\0\51\30"+
    "\u0a77\0\57\30\1\0\57\30\1\0\205\30\6\0\4\30\3\31\2\30"+
    "\14\0\46\30\1\0\1\30\5\0\1\30\2\0\70\30\7\0\1\30"+
    "\17\0\1\31\27\30\11\0\7\30\1\0\7\30\1\0\7\30\1\0"+
    "\7\30\1\0\7\30\1\0\7\30\1\0\7\30\1\0\7\30\1\0"+
    "\40\31\57\0\1\30\u01d5\0\3\30\31\0\11\30\6\31\1\0\5\30"+
    "\2\0\5\30\4\0\126\30\2\0\2\31\2\0\3\30\1\0\132\30"+
    "\1\0\4\30\5\0\52\30\2\0\136\30\21\0\33\30\65\0\20\30"+
    "\u0200\0\u19b6\30\112\0\u51eb\30\25\0\u048d\30\103\0\56\30\2\0\u010d\30"+
    "\3\0\20\30\12\31\2\30\24\0\57\30\1\31\4\0\12\31\1\0"+
    "\37\30\2\31\120\30\2\31\45\0\11\30\2\0\147\30\2\0\44\30"+
    "\1\0\10\30\77\0\13\30\1\31\3\30\1\31\4\30\1\31\27\30"+
    "\5\31\20\0\1\30\7\0\64\30\14\0\2\31\62\30\22\31\12\0"+
    "\12\31\6\0\22\31\6\30\3\0\1\30\1\0\1\30\2\0\12\31"+
    "\34\30\10\31\2\0\27\30\15\31\14\0\35\30\3\0\4\31\57\30"+
    "\16\31\16\0\1\30\12\31\6\0\5\30\1\31\12\30\12\31\5\30"+
    "\1\0\51\30\16\31\11\0\3\30\1\31\10\30\2\31\2\0\12\31"+
    "\6\0\27\30\3\0\1\30\3\31\62\30\1\31\1\30\3\31\2\30"+
    "\2\31\5\30\2\31\1\30\1\31\1\30\30\0\3\30\2\0\13\30"+
    "\5\31\2\0\3\30\2\31\12\0\6\30\2\0\6\30\2\0\6\30"+
    "\11\0\7\30\1\0\7\30\1\0\53\30\1\0\12\30\12\0\163\30"+
    "\10\31\1\0\2\31\2\0\12\31\6\0\u2ba4\30\14\0\27\30\4\0"+
    "\61\30\u2104\0\u016e\30\2\0\152\30\46\0\7\30\14\0\5\30\5\0"+
    "\1\30\1\31\12\30\1\0\15\30\1\0\5\30\1\0\1\30\1\0"+
    "\2\30\1\0\2\30\1\0\154\30\41\0\u016b\30\22\0\100\30\2\0"+
    "\66\30\50\0\15\30\3\0\20\31\20\0\20\31\3\0\2\30\30\0"+
    "\3\30\31\0\1\30\6\0\5\30\1\0\207\30\2\0\1\31\4\0"+
    "\1\30\13\0\12\31\7\0\32\30\4\0\1\30\1\0\32\30\13\0"+
    "\131\30\3\0\6\30\2\0\6\30\2\0\6\30\2\0\3\30\3\0"+
    "\2\30\3\0\2\30\22\0\3\31\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\7\4\3\5\1\6\2\1\1\4"+
    "\1\7\1\10\6\4\3\0\2\1\1\0\5\4\1\11"+
    "\2\1\1\12\1\4\1\1\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[43];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\33\0\33\0\66\0\121\0\154\0\207\0\242"+
    "\0\275\0\330\0\363\0\u010e\0\33\0\u0129\0\u0144\0\u015f"+
    "\0\u017a\0\33\0\207\0\u0195\0\u01b0\0\u01cb\0\u01e6\0\u0201"+
    "\0\u021c\0\u0237\0\u0252\0\u026d\0\u0288\0\u02a3\0\u02be\0\u02d9"+
    "\0\u02f4\0\u030f\0\u032a\0\u0345\0\u0360\0\u037b\0\u0396\0\u03b1"+
    "\0\u03cc\0\u03e7\0\u0402";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[43];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\2\7\1\12\4\7\1\13\1\14\1\15\2\16\1\17"+
    "\1\20\1\3\1\21\1\7\1\2\1\22\35\0\1\7"+
    "\1\23\3\7\1\24\7\7\5\0\2\7\1\0\3\7"+
    "\3\0\6\7\1\25\6\7\5\0\2\7\1\0\3\7"+
    "\3\0\3\7\1\26\11\7\5\0\2\7\1\0\3\7"+
    "\3\0\15\7\5\0\2\7\1\0\3\7\3\0\6\7"+
    "\1\27\6\7\5\0\2\7\1\0\3\7\3\0\12\7"+
    "\1\30\2\7\5\0\2\7\1\0\3\7\3\0\11\7"+
    "\1\31\3\7\5\0\2\7\1\0\3\7\21\0\2\15"+
    "\1\32\31\0\1\15\36\0\1\20\34\0\1\33\3\0"+
    "\24\34\1\35\1\36\1\0\4\34\2\0\15\7\3\0"+
    "\2\37\2\7\1\0\3\7\3\0\2\7\1\23\12\7"+
    "\5\0\2\7\1\0\3\7\3\0\11\7\1\40\3\7"+
    "\5\0\2\7\1\0\3\7\3\0\4\7\1\41\10\7"+
    "\5\0\2\7\1\0\3\7\3\0\7\7\1\42\5\7"+
    "\5\0\2\7\1\0\3\7\3\0\6\7\1\43\6\7"+
    "\5\0\2\7\1\0\3\7\3\0\12\7\1\44\2\7"+
    "\5\0\2\7\1\0\3\7\23\0\1\15\32\0\2\37"+
    "\33\0\1\34\1\45\31\0\1\35\1\46\5\0\24\34"+
    "\1\35\1\47\1\0\4\34\24\0\1\37\1\50\7\0"+
    "\14\7\1\24\5\0\2\7\1\0\3\7\3\0\5\7"+
    "\1\23\7\7\5\0\2\7\1\0\3\7\3\0\4\7"+
    "\1\23\10\7\5\0\2\7\1\0\3\7\3\0\6\7"+
    "\1\23\6\7\5\0\2\7\1\0\3\7\3\0\13\7"+
    "\1\51\1\7\5\0\2\7\1\0\3\7\26\0\1\45"+
    "\1\0\1\33\27\0\1\52\1\46\1\0\1\33\3\0"+
    "\24\34\1\35\1\47\1\0\1\53\3\34\25\0\1\50"+
    "\7\0\6\7\1\42\6\7\5\0\2\7\1\0\3\7"+
    "\25\0\2\52\27\0\2\37\1\34\1\45\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1053];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\2\11\11\1\1\11\4\1\1\11\7\1\3\0"+
    "\2\1\1\0\13\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[43];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2272) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { return new Symbol(CircuitSym.SEPARATOR);
          }
        case 11: break;
        case 5: 
          { return new Symbol(CircuitSym.RELOP);
          }
        case 12: break;
        case 4: 
          { return new Symbol(CircuitSym.ID);
          }
        case 13: break;
        case 1: 
          { return new Symbol(CircuitSym.NCONST);
          }
        case 14: break;
        case 3: 
          { /* ignore */
          }
        case 15: break;
        case 6: 
          { return new Symbol(CircuitSym.SIGN);
          }
        case 16: break;
        case 9: 
          { return new Symbol(CircuitSym.RCONST);
          }
        case 17: break;
        case 8: 
          { return new Symbol(CircuitSym.KEYWORD);
          }
        case 18: break;
        case 10: 
          { return new Symbol(CircuitSym.ECONST);
          }
        case 19: break;
        case 2: 
          { return new Symbol(CircuitSym.error);
          }
        case 20: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return new Symbol(CircuitSym.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
